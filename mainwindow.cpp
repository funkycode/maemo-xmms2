// checksum 0xa193 version 0x30001
/*
  This file was generated by the Mobile Qt Application wizard of Qt Creator.
  MainWindow is a convenience class containing mobile device specific code
  such as screen orientation handling.
  It is recommended not to modify this file, since newer versions of Qt Creator
  may offer an updated version of it.
*/

#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QtCore/QCoreApplication>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <cstdlib>
#include <xmmsclient/xmmsclient-glib.h>
#include <xmmsclient/xmmsclient.h>
//#include <xmmsclient/xmmsclient++.h>
#include <glib.h>
#include <glib/gprintf.h>


static int32_t playback_status = 0;
static uint32_t play_time = 0;
static int32_t cur_track_duration = 0;
static int32_t cur_track_id = 0;



typedef struct {
        int id;
        QString Artist;
        QString Title;
} song_info_str;


//static int on_playback_status_changed( xmmsv_t *value, void *user_data );
static xmmsc_connection_t *connection = NULL;
//static void xmms_callbacks();

void MainWindow::xmmsc_result_notifier_set_and_unref (xmmsc_result_t *result, xmmsc_result_notifier_t func, void *user_data)
{
        xmmsc_result_notifier_set_full (result, func, user_data, NULL);
        xmmsc_result_unref(result);
}



void MainWindow::connect_xmms()
{
    connection = xmmsc_init ("maexmms");
    if (!connection) {
             fprintf (stderr, "OOM!\n");
             exit (EXIT_FAILURE);
            }
            if (!xmmsc_connect (connection, getenv ("XMMS_PATH"))) {
                            fprintf (stderr, "Connection failed: %s\n",
                                     xmmsc_get_last_error (connection));

                            exit (EXIT_FAILURE);
                        }

     xmmsc_mainloop_gmain_init (connection);

     xmms_callbacks();

         }




void MainWindow::xmms_callbacks(){

    xmmsc_result_t* result;

    result = xmmsc_playback_status(connection);

    MainWindow::xmmsc_result_notifier_set_and_unref(result, on_playback_status_changed, NULL);

    XMMS_CALLBACK_SET( connection, xmmsc_broadcast_playback_status, on_playback_status_changed, NULL );
}

class MyWidget : public QWidget
{
public:
    MyWidget(QWidget *parent = 0);

};



MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), ui(new Ui::MainWindow)
{
    //QString song_info;
    ui->setupUi(this);
    connect_xmms();

    //connect(get_song_info(), SIGNAL(info_changed()), song_info, SLOT(setTextLabel()));

    //connect(setLabelText(QStrin song_info), SIGNAL(get_song_id(QString song_info_new)), this, SLOT(setLabelText(QString song_info)));
   //this->setLabelText(int song_id);

}




MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::setOrientation(ScreenOrientation orientation)
{
#if defined(Q_OS_SYMBIAN)
    // If the version of Qt on the device is < 4.7.2, that attribute won't work
    if (orientation != ScreenOrientationAuto) {
        const QStringList v = QString::fromAscii(qVersion()).split(QLatin1Char('.'));
        if (v.count() == 3 && (v.at(0).toInt() << 16 | v.at(1).toInt() << 8 | v.at(2).toInt()) < 0x040702) {
            qWarning("Screen orientation locking only supported with Qt 4.7.2 and above");
            return;
        }
    }
#endif // Q_OS_SYMBIAN

    Qt::WidgetAttribute attribute;
    switch (orientation) {
#if QT_VERSION < 0x040702
    // Qt < 4.7.2 does not yet have the Qt::WA_*Orientation attributes
    case ScreenOrientationLockPortrait:
        attribute = static_cast<Qt::WidgetAttribute>(128);
        break;
    case ScreenOrientationLockLandscape:
        attribute = static_cast<Qt::WidgetAttribute>(129);
        break;
    default:
    case ScreenOrientationAuto:
        attribute = static_cast<Qt::WidgetAttribute>(130);
        break;
#else // QT_VERSION < 0x040702
    case ScreenOrientationLockPortrait:
        attribute = Qt::WA_LockPortraitOrientation;
        break;
    case ScreenOrientationLockLandscape:
        attribute = Qt::WA_LockLandscapeOrientation;
        break;
    default:
    case ScreenOrientationAuto:
        attribute = Qt::WA_AutoOrientation;
        break;
#endif // QT_VERSION < 0x040702
    };
    setAttribute(attribute, true);
}

void MainWindow::showExpanded()
{

#ifdef Q_OS_SYMBIAN
    showFullScreen();
#elif defined(Q_WS_MAEMO_5) || defined(Q_WS_MAEMO_6)
    showMaximized();
#else
    show();
#endif
}







void MainWindow::on_play_bt_clicked()
{

    xmmsc_result_t *result= xmmsc_playback_start (connection);
    xmmsc_result_wait (result);
    xmmsc_result_unref (result);
    //if (ui->play_bt->text == "Play")
   // {
   //     ui->play_bt->setText(tr("Pause"));
   // }


}

void MainWindow::on_stop_bt_clicked()
{

    xmmsc_result_t *result= xmmsc_playback_stop (connection);
    xmmsc_result_wait (result);
    xmmsc_result_unref (result);
}
void MainWindow::on_next_bt_clicked()
{
    xmmsc_result_t *result = xmmsc_playlist_set_next_rel(connection, 1);
    xmmsc_result_wait (result);
    result = xmmsc_playback_tickle(connection);
    xmmsc_result_wait (result);
    xmmsc_result_unref (result);
}

void MainWindow::on_prev_bt_clicked()
{
    xmmsc_result_t *result = xmmsc_playlist_set_next_rel(connection, -1);
    xmmsc_result_wait (result);
    result = xmmsc_playback_tickle(connection);
    xmmsc_result_wait (result);
    xmmsc_result_unref (result);
}

void MainWindow::setLabelText(QString label)
{

    label="test";
   /* if (song_info != song_info_new){

        song_info = song_info_new;
        emit get_song_info(song_info_new);
    }*/


    ui->song_info->setText(label);




}



void MainWindow::get_song_info()
{
    //int id;
    const char *err_buf;
    const char *val;
    xmmsv_t *dict_entry, *return_value, *infos;
    int id;
    song_info_str song_info;
    xmmsc_result_t *result = xmmsc_playback_current_id (connection);
    xmmsc_result_wait (result);
    return_value = xmmsc_result_get_value (result);
    if (xmmsv_is_error (return_value) &&
                xmmsv_get_error (return_value, &err_buf)) {
                    fprintf (stderr, "playback current id returns error, %s\n",
                             err_buf);
            }

            if (!xmmsv_get_int (return_value, &id)) {
                    fprintf (stderr, "xmmsc_playback_current_id didn't "
                             "return int as expected\n");
                    /* Fake id (ids are >= 1) used as an error flag. */
                    id = 0;
            }
    xmmsc_result_unref (result);
    result = xmmsc_medialib_get_info (connection, id);
    xmmsc_result_wait (result);
    return_value = xmmsc_result_get_value (result);
    if (xmmsv_is_error (return_value) &&
                xmmsv_get_error (return_value, &err_buf)) {
                    /*
                     * This can return error if the id
                     * is not in the medialib
                     */
                    fprintf (stderr, "medialib get info returns error, %s\n",
                             err_buf);
                    exit (EXIT_FAILURE);
            }

    //song_info.id=id;
    infos = xmmsv_propdict_to_dict (return_value, NULL);
    if (!xmmsv_dict_get (infos, "artist", &dict_entry) ||
                !xmmsv_get_string (dict_entry, &val)) {
        val = "No Artist";
                }
    song_info.Artist=val;
    if (!xmmsv_dict_get (infos, "title", &dict_entry) ||
                !xmmsv_get_string (dict_entry, &val)) {
       val = "No Title";
            }
            printf ("title = %s\n", val);



    song_info.Title = val;



    xmmsv_unref (infos);
    xmmsc_result_unref (result);
   // xmmsc_unref (connection);
   ui->song_info->setText(song_info.Title);


}

static int on_playback_status_changed( xmmsv_t *value, void *user_data )
{
    if ( !xmmsv_get_int(value, &playback_status) )
        {
            playback_status = XMMS_PLAYBACK_STATUS_STOP;
            return TRUE;
        }

    switch( playback_status )
        {
            case XMMS_PLAYBACK_STATUS_PLAY:
            {
                //MainWindow::get_song_info();
            printf("play");
               break;

            }
            case XMMS_PLAYBACK_STATUS_STOP:
               //for now we do nothing, just smile =)
                break;
            case XMMS_PLAYBACK_STATUS_PAUSE:
               //MainWindow->ui->play_bt->setText("Pause");

                break;
        }



}

