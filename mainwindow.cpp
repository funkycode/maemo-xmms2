// checksum 0xa193 version 0x30001
/*
  This file was generated by the Mobile Qt Application wizard of Qt Creator.
  MainWindow is a convenience class containing mobile device specific code
  such as screen orientation handling.
  It is recommended not to modify this file, since newer versions of Qt Creator
  may offer an updated version of it.
*/

#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "QLabel"
#include <QtCore/QCoreApplication>
#include <stdlib.h>
#include <xmmsclient/xmmsclient.h>
#include <QObject>

static xmmsc_connection_t *connection = NULL;
//static int id=0;




class Song_DATA : public QObject
 {
     Q_OBJECT


 };





void connect_xmms()
{
    connection = xmmsc_init ("maexmms");
    if (!connection) {
             fprintf (stderr, "OOM!\n");
             exit (EXIT_FAILURE);
            }
            if (!xmmsc_connect (connection, getenv ("XMMS_PATH"))) {
                            fprintf (stderr, "Connection failed: %s\n",
                                     xmmsc_get_last_error (connection));

                            exit (EXIT_FAILURE);
                        }
}

class MyWidget : public QWidget
{
public:
    MyWidget(QWidget *parent = 0);

    //QLabel *song_info;
    //QString song_data;

signals:
   //void setTextLabel();

public slots:
   // void setTextLabel();

};



MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    connect_xmms();

    connect(song_info_new, SIGNAL(get_song_info(QString)),
                          song_info, SLOT(setTextLabel(QString)));

    //connect(setLabelText(QString song_info), SIGNAL(get_song_id(QString song_info_new)), this, SLOT(setLabelText(QString song_info)));
   //this->setLabelText(int song_id);

}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::setOrientation(ScreenOrientation orientation)
{
#if defined(Q_OS_SYMBIAN)
    // If the version of Qt on the device is < 4.7.2, that attribute won't work
    if (orientation != ScreenOrientationAuto) {
        const QStringList v = QString::fromAscii(qVersion()).split(QLatin1Char('.'));
        if (v.count() == 3 && (v.at(0).toInt() << 16 | v.at(1).toInt() << 8 | v.at(2).toInt()) < 0x040702) {
            qWarning("Screen orientation locking only supported with Qt 4.7.2 and above");
            return;
        }
    }
#endif // Q_OS_SYMBIAN

    Qt::WidgetAttribute attribute;
    switch (orientation) {
#if QT_VERSION < 0x040702
    // Qt < 4.7.2 does not yet have the Qt::WA_*Orientation attributes
    case ScreenOrientationLockPortrait:
        attribute = static_cast<Qt::WidgetAttribute>(128);
        break;
    case ScreenOrientationLockLandscape:
        attribute = static_cast<Qt::WidgetAttribute>(129);
        break;
    default:
    case ScreenOrientationAuto:
        attribute = static_cast<Qt::WidgetAttribute>(130);
        break;
#else // QT_VERSION < 0x040702
    case ScreenOrientationLockPortrait:
        attribute = Qt::WA_LockPortraitOrientation;
        break;
    case ScreenOrientationLockLandscape:
        attribute = Qt::WA_LockLandscapeOrientation;
        break;
    default:
    case ScreenOrientationAuto:
        attribute = Qt::WA_AutoOrientation;
        break;
#endif // QT_VERSION < 0x040702
    };
    setAttribute(attribute, true);
}

void MainWindow::showExpanded()
{

#ifdef Q_OS_SYMBIAN
    showFullScreen();
#elif defined(Q_WS_MAEMO_5) || defined(Q_WS_MAEMO_6)
    showMaximized();
#else
    show();
#endif
}







void MainWindow::on_play_bt_clicked()
{

    xmmsc_result_t *result= xmmsc_playback_start (connection);
    xmmsc_result_wait (result);
    xmmsc_result_unref (result);
    //if (ui->play_bt->text == "Play")
   // {
   //     ui->play_bt->setText(tr("Pause"));
   // }


}

void MainWindow::on_stop_bt_clicked()
{

    xmmsc_result_t *result= xmmsc_playback_stop (connection);
    xmmsc_result_wait (result);
    xmmsc_result_unref (result);
}
void MainWindow::on_next_bt_clicked()
{
    xmmsc_result_t *result = xmmsc_playlist_set_next_rel(connection, 1);
    xmmsc_result_wait (result);
    result = xmmsc_playback_tickle(connection);
    xmmsc_result_wait (result);
    xmmsc_result_unref (result);
}

void MainWindow::on_prev_bt_clicked()
{
    xmmsc_result_t *result = xmmsc_playlist_set_next_rel(connection, -1);
    xmmsc_result_wait (result);
    result = xmmsc_playback_tickle(connection);
    xmmsc_result_wait (result);
    xmmsc_result_unref (result);
}

void MainWindow::setLabelText(QString song_info)
{


    ui->song_info->setText(song_info);




}

void MainWindow::get_song_info(QString song_info_new)
{
    //int id;
    const char *err_buf;
    const char *val;
    xmmsv_t *dict_entry, *infos, *return_value;
    int id;
    //QString song_info_new;
    xmmsc_result_t *result = xmmsc_playback_current_id (connection);
    xmmsc_result_wait (result);
    return_value = xmmsc_result_get_value (result);
    if (xmmsv_is_error (return_value) &&
                xmmsv_get_error (return_value, &err_buf)) {
                    fprintf (stderr, "playback current id returns error, %s\n",
                             err_buf);
            }

            if (!xmmsv_get_int (return_value, &id)) {
                    fprintf (stderr, "xmmsc_playback_current_id didn't "
                             "return int as expected\n");
                    /* Fake id (ids are >= 1) used as an error flag. */
                    id = 0;
            }
    xmmsc_result_unref (result);
    result = xmmsc_medialib_get_info (connection, id);
    xmmsc_result_wait (result);
    return_value = xmmsc_result_get_value (result);
    if (xmmsv_is_error (return_value) &&
                xmmsv_get_error (return_value, &err_buf)) {
                    /*
                     * This can return error if the id
                     * is not in the medialib
                     */
                    fprintf (stderr, "medialib get info returns error, %s\n",
                             err_buf);
                    exit (EXIT_FAILURE);
            }

    printf("%d\n",id);
    infos = xmmsv_propdict_to_dict (return_value, NULL);
    if (!xmmsv_dict_get (infos, "artist", &dict_entry) ||
                !xmmsv_get_string (dict_entry, &val)) {
        val = "No Artist";
                }
    song_info_new=val;
    if (!xmmsv_dict_get (infos, "title", &dict_entry) ||
                !xmmsv_get_string (dict_entry, &val)) {
       val = "No Title";
            }
            printf ("title = %s\n", val);



    song_info_new = song_info_new+" - "+val;



    xmmsv_unref (infos);
    xmmsc_result_unref (result);
   // xmmsc_unref (connection);



}


